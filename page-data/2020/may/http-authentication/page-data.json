{"componentChunkName":"component---src-templates-blog-post-js","path":"/2020/may/http-authentication/","result":{"data":{"site":{"siteMetadata":{"title":"Blog"}},"markdownRemark":{"id":"45f01306-b9c1-5640-a69b-98fdaa07670f","excerpt":"How does basic HTTP authentication work? note taken from medium article by Jignesh Kakadiya Client Side: You type url and press enter Client finds the server to…","html":"<h1>How does basic HTTP authentication work?</h1>\n<p>note taken from medium article by <a href=\"https://medium.com/@bitshadow/how-basic-http-authentication-and-session-works-d29af9caec31\">Jignesh Kakadiya</a></p>\n<p><strong>Client Side:</strong></p>\n<ul>\n<li>You type url and press enter</li>\n<li>Client finds the server to talk with, DNS resolutions, 2 way handshake etc.</li>\n<li>Client sends a request to the server for getting the data corresponding to the path ”/”</li>\n</ul>\n<p><strong>Server Side:</strong></p>\n<ul>\n<li>Server gets the request and goes to pull the content for the request</li>\n<li>Server sends response back to the client containing the document browsers can render on the screen.</li>\n</ul>\n<h3>2. Signup</h3>\n<p><strong>Client Side:</strong></p>\n<ul>\n<li>Fill out user id and pw</li>\n<li>browser sends a request containing your id and pw to the server.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">The HTTP request looks like this:\n---------------------------------\nrequest: POST / HTTP/1.1\n         Host: medium.com\n         Content-Type: application/x-www-form-urlencoded\n         Content-Length: 30\n\n         userid=foo&amp;password=mypassword</code></pre></div>\n<p><strong>Server side:</strong></p>\n<ul>\n<li>Receives the request, extracts the data (credentials) and creates an entry in their database with userid and password</li>\n<li>\n<p>if created successfully without any conflict, Server redirects user to login page.</p>\n<ul>\n<li>otherwise, throws some error message</li>\n</ul>\n</li>\n<li>to protect your pw, server creates hash of password and stores it</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">password_hash = hash.create(&#39;mypassword&#39;, ‘sha-1’);\n// password_hash = 2ef5aa5a037ae1be9c7cdd15649cf9fc686ddee2\n// used sha-1 (Secure Hash Algorithm 1) for generating hashed password</code></pre></div>\n<h3>3. Login</h3>\n<p><strong>Client Side:</strong></p>\n<ul>\n<li>Browser sends credentials (id, pw) via login form, which points to for ex: “/login”</li>\n</ul>\n<p><strong>Server Side:</strong></p>\n<ul>\n<li>Server gets request, extracts userid and pw</li>\n<li>Searches for that userid in the database, extracts pw for that userid, and compares pw against pw sent by the client.</li>\n<li>if hashed pw stored, it checks hash value.</li>\n<li>\n<p>if pw matches, server creates the <strong>token</strong></p>\n<ul>\n<li>it’s a string that is used to identify user to that user won’t have to send id and pw with every request in future.</li>\n</ul>\n</li>\n</ul>\n<h3>4. Generating token, and tell client to use that token for future requests.</h3>\n<p><strong>Server side:</strong></p>\n<ul>\n<li>Server creates a random token</li>\n<li>Server tells the client to store this token somewhere and use it for future request. Server does this by setting response header <strong>Set-Cookie</strong> along with body.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">HTTP response looks like this:\n====================================================================\nHTTP/1.1 200 OK          \nSet-Cookie: access_token=xyztoken; Path=/; Domain=foo.com; expires=Thu, 01 Jan 2050 00:00:00 GMT;\n--------------------------------------------------------------------&lt;html&gt;\n&lt;body&gt;\n&lt;h1&gt;Hello User!&lt;/h1&gt;\n(more user info)\n  .\n  .\n  .\n&lt;/body&gt;\n&lt;/html&gt;\n====================================================================\nSet-Cookie header tells client to store access_token in cookie for path &quot;/&quot; and domain &quot;foo.com&quot; which &quot;expires&quot; on 1st day of 2050.</code></pre></div>\n<p><strong>Client side:</strong></p>\n<ul>\n<li>Client gets the response</li>\n<li>Client uses data (HTML) to render it on screen and value of set-cookie to set as a cookie.</li>\n</ul>\n<h3>5. User browses site as logged in user</h3>\n<p><strong>Client side:</strong></p>\n<ul>\n<li>user is logged in.</li>\n<li>Client has cookie. When user navigates, browser will send back the cookie to ther server by setting it to request header cookie</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">HTTP request looks like this:\n\nGET https://www.foo.com/xyz HTTP/1.1\nCookie: access_token=xyztoken;\n\nClient sends back that cookie to the server to identify current userid.</code></pre></div>\n<p><strong>Server side:</strong></p>\n<ul>\n<li>Server receives a request</li>\n<li>extracts access-token from cookie and searches for that token in database to see which user id it points to</li>\n<li>Once server has user id, it’s easy to get all the information about the user and create specific HTML document for that user.</li>\n<li>If token doesn’t match, server will redirect client to the login page, or show errors.</li>\n<li>While sending data back to the client, server doesn’t have to send the Set-Cookie as a header again and again because client already have that cookie stored in a persistent storage.</li>\n</ul>\n<h3>6. Log out</h3>\n<p><strong>Client side:</strong></p>\n<ul>\n<li>When click on the logout, there’s a separate route for logout (ex: /logout)</li>\n<li>Browser sends request to the server on that route with existing token set as a cookie.</li>\n</ul>\n<p><strong>Server side:</strong></p>\n<ul>\n<li>extracts token, finds the userid and deletes the access token against that userid, and redirects user to login page.</li>\n<li>Now toke removed from database, so it tells client to remove that toke from cookie because that token doesn’t exist anymore.</li>\n<li>While redirecting user to login page, server uses <strong>Set-Cookie</strong> header again, but sets access_token as empty string to tell browser to remove token from the cookie.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Set-Cookie: token=&#39;&#39;; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT</code></pre></div>\n<p>Notes from class</p>\n<p>인증: 회원가입과 로그인</p>\n<p>인증이 왜 필요? 서비스를 누가 쓰는지, 어떻게 사용하는지, 추적이 가능하오록</p>\n<p>인증에 필요한것: 아이디, 이메일, 비밀번호</p>","frontmatter":{"title":"","date":null,"description":null}}},"pageContext":{"slug":"/2020/may/http-authentication/","previous":{"fields":{"slug":"/2020/may/simple-react-api/"},"frontmatter":{"title":"Fetching API in react - in the simplest form"}},"next":null}}}